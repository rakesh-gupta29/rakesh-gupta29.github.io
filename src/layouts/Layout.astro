---
interface Props {
  title: string;
  desc: string;
}
const { title, desc } = Astro.props;
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import "../index.css";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1"
    />
    <meta name="title" content={title} />
    <meta property="og:locale" content="en_US" />
    <meta name="icon" content="https://rakesh-gupta29.github.io/favicon.jpeg" />
    <meta name="description" content={desc} />
    <meta name="theme-color" content="#000000" />
    <meta name="color-scheme" content="dark" />
    <meta name="robots" content="index, follow" />
    <meta name="googlebot" content="index, follow" />
    <meta
      name="keywords"
      content="Rakesh Gupta, Frontend Developer, React Developer, Next.js, Svelte, UI/UX, Web Development, CSS, TailwindCSS, Typescript, Firebase, MongoDB, NodeJS, ExpressJS, Golang, MERN Stack, HTML, CSS, Indore, India, Blacksof, JavaScript, Portfolio,"
    />

    <meta name="author" content="Rakesh Gupta (rakesh.rkgupta29@gmail.com)" />

    <meta
      itemprop="image"
      content="https://rakesh-gupta29.github.io/preview.png"
    />
    <meta itemprop="name" content="Rakesh Gupta | Portfolio" />

    <title>{title}</title>

    <link
      rel="icon"
      type="image/x-icon"
      href="https://rakesh-gupta29.github.io/favicon.jpeg"
    />
    <link
      rel="apple-touch-icon"
      href="https://rakesh-gupta29.github.io/favicon.jpeg"
    />
    <link rel="canonical" href="https://rakesh-gupta29.github.io" />
    <link
      rel="shortcut icon"
      href="https://rakesh-gupta29.github.io/favicon.jpeg"
    />

    <meta property="og:type" content="website" />
    <meta property="og:site_name" content="Rakesh Gupta | Portfolio" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={desc} />
    <meta
      property="og:image:secure_url"
      content="https://rakesh-gupta29.github.io/preview.png"
    />
    <meta
      property="og:image"
      itemprop="image"
      content="https://rakesh-gupta29.github.io/preview.png"
    />

    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:site" content="@rakesh_gupta29" />
    <meta property="twitter:creator:id" content="@rakesh_gupta29" />
    <meta property="twitter:url" content="https://rakesh-gupta29.github.io/" />
    <meta
      property="twitter:image"
      content="https://rakesh-gupta29.github.io/preview.png"
    />
    <meta
      property="twitter:image:alt"
      content="Portfolio of Rakesh gupta - frontend developer at Blacksof"
    />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={desc} />

    <script async src="https://www.googletagmanager.com/gtag/js?id=G-4QK4W491DC"
    ></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());

      gtag("config", "G-4QK4W491DC");
    </script>
  </head>
  <body>
    <div class="fixed pointer-events-none z-0 inset-0" aria-hidden="true">
      <canvas id="body-canvas"></canvas>
    </div>

    <Header />
    <div class="relative">
      <slot />
    </div>
    <Footer />
  </body>

  <script>
    class ParticleAnimation {
      private canvas: HTMLCanvasElement;
      private canvasContainer: any;
      private context: any;
      private dpr: any;
      private settings: {
        quantity: number;
        staticity: number;
        ease: number;
      } = { quantity: 0, staticity: 0, ease: 0 };
      private circles: {
        x: number;
        y: number;
        translateX: number;
        translateY: number;
        size: number;
        alpha: number;
        targetAlpha: number;
        dx: number;
        dy: number;
        magnetism: number;
      }[] = [];
      private mouse: {
        x: number;
        y: number;
      } = {
        x: 0,
        y: 0,
      };
      private canvasSize: {
        w: number;
        h: number;
      } = {
        w: 0,
        h: 0,
      };

      constructor(
        el: HTMLCanvasElement,
        { quantity = 150, staticity = 100, ease = 10 } = {}
      ) {
        this.canvas = el;
        if (!this.canvas) return;
        this.canvasContainer = this.canvas.parentElement as HTMLElement;
        this.context = this.canvas.getContext("2d")!;
        this.dpr = window.devicePixelRatio || 1;
        this.settings = {
          quantity: quantity,
          staticity: staticity,
          ease: ease,
        };
        this.onMouseMove = this.onMouseMove.bind(this);
        this.initCanvas = this.initCanvas.bind(this);
        this.resizeCanvas = this.resizeCanvas.bind(this);
        this.drawCircle = this.drawCircle.bind(this);
        this.drawParticles = this.drawParticles.bind(this);
        this.remapValue = this.remapValue.bind(this);
        this.animate = this.animate.bind(this);
        this.init();
      }

      init() {
        this.initCanvas();
        this.animate();
        window.addEventListener("resize", this.initCanvas);
        window.addEventListener("mousemove", this.onMouseMove);
      }

      initCanvas() {
        this.resizeCanvas();
        this.drawParticles();
      }

      onMouseMove(event: MouseEvent) {
        const { clientX, clientY } = event;
        const rect = this.canvas.getBoundingClientRect();
        const { w, h } = this.canvasSize;
        const x = clientX - rect.left - w / 2;
        const y = clientY - rect.top - h / 2;
        const inside = x < w / 2 && x > -(w / 2) && y < h / 2 && y > -(h / 2);
        if (inside) {
          this.mouse.x = x;
          this.mouse.y = y;
        }
      }

      resizeCanvas() {
        this.circles.length = 0;
        this.canvasSize.w = this.canvasContainer.offsetWidth;
        this.canvasSize.h = this.canvasContainer.offsetHeight;
        this.canvas.width = this.canvasSize.w * this.dpr;
        this.canvas.height = this.canvasSize.h * this.dpr;
        this.canvas.style.width = this.canvasSize.w + "px";
        this.canvas.style.height = this.canvasSize.h + "px";
        this.context.scale(this.dpr, this.dpr);
      }

      circleParams() {
        const x = Math.floor(Math.random() * this.canvasSize.w);
        const y = Math.floor(Math.random() * this.canvasSize.h);
        const translateX = 0;
        const translateY = 0;
        const size = Math.floor(Math.random() * 1) + 1;
        const alpha = 0;
        const targetAlpha = parseFloat((Math.random() * 0.6 + 0.1).toFixed(1));
        const dx = (Math.random() - 0.5) * 0.2;
        const dy = (Math.random() - 0.5) * 0.2;
        const magnetism = 0.1 + Math.random() * 4;
        return {
          x,
          y,
          translateX,
          translateY,
          size,
          alpha,
          targetAlpha,
          dx,
          dy,
          magnetism,
        };
      }

      drawCircle(circle: any, update = false) {
        const { x, y, translateX, translateY, size, alpha } = circle;
        this.context.translate(translateX, translateY);
        this.context.beginPath();
        this.context.arc(x, y, size, 0, 2 * Math.PI);
        this.context.fillStyle = `rgba(216, 216, 216, ${alpha * 0.4})`;
        this.context.fill();
        this.context.setTransform(this.dpr, 0, 0, this.dpr, 0, 0);
        if (!update) {
          this.circles.push(circle);
        }
      }

      clearContext() {
        this.context.clearRect(0, 0, this.canvasSize.w, this.canvasSize.h);
      }

      drawParticles() {
        this.clearContext();
        const particleCount = this.settings.quantity;
        for (let i = 0; i < particleCount; i++) {
          const circle = this.circleParams();
          this.drawCircle(circle);
        }
      }

      remapValue(
        value: number,
        start1: number,
        end1: number,
        start2: number,
        end2: number
      ): number {
        const remapped =
          ((value - start1) * (end2 - start2)) / (end1 - start1) + start2;
        return remapped > 0 ? remapped : 0;
      }

      animate() {
        this.clearContext();
        this.circles.forEach((circle, i) => {
          // Handle the alpha value
          const edge = [
            circle.x + circle.translateX - circle.size,
            this.canvasSize.w - circle.x - circle.translateX - circle.size,
            circle.y + circle.translateY - circle.size,
            this.canvasSize.h - circle.y - circle.translateY - circle.size,
          ];
          const closestEdge = edge.reduce((a, b) => Math.min(a, b));
          const remapClosestEdge: any = this.remapValue(
            closestEdge,
            0,
            20,
            0,
            1
          ).toFixed(2);
          if (remapClosestEdge > 1) {
            circle.alpha += 0.02;
            if (circle.alpha > circle.targetAlpha)
              circle.alpha = circle.targetAlpha;
          } else {
            circle.alpha = circle.targetAlpha * remapClosestEdge;
          }
          circle.x += circle.dx;
          circle.y += circle.dy;
          circle.translateX +=
            (this.mouse.x / (this.settings.staticity / circle.magnetism) -
              circle.translateX) /
            this.settings.ease;
          circle.translateY +=
            (this.mouse.y / (this.settings.staticity / circle.magnetism) -
              circle.translateY) /
            this.settings.ease;

          if (
            circle.x < -circle.size ||
            circle.x > this.canvasSize.w + circle.size ||
            circle.y < -circle.size ||
            circle.y > this.canvasSize.h + circle.size
          ) {
            this.circles.splice(i, 1);
            // create a new circle
            const newCircle = this.circleParams();
            this.drawCircle(newCircle);
          } else {
            this.drawCircle(
              {
                ...circle,
                x: circle.x,
                y: circle.y,
                translateX: circle.translateX,
                translateY: circle.translateY,
                alpha: circle.alpha,
              },
              true
            );
          }
        });
        window.requestAnimationFrame(this.animate);
      }
    }

    const canvas = document.getElementById("body-canvas") as HTMLCanvasElement;
    new ParticleAnimation(canvas);
  </script>
</html>
